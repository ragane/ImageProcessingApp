# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
import sys
sys.path.append("src")

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QStatusBar
import cv2, imutils
from DisplayHistogram import Histogram
from matplotlib.backends.backend_qt5agg import (NavigationToolbar2QT as NavigationToolbar)
from matplotlib.figure import Figure
from Transcription import *
from AdditionalColorspaceWindow import HSV_window, RGB_window, BGR_window
from LowPassFilterWindow import (
    Filter2D,
    ImageBlurring,
    GaussBlurring,
    MedianBlurring,
    BilateralFiltering,
)
from HighPassFilterWindow import (
    SobelFilter,
    LaplacianFilter,
    ScharrFilter,
    CannyFilter,
)
from MorphoTransformWindow import (
    ErosionTransform,
    DilationTransform,
    OpeningTransform,
    ClosingTransform,
    GradientTransform,
)


class Ui_MainWindow(object):

    def __init__(self, *args):
        super().__init__()

        self.windowHSV = HSV_window()
        self.windowHSV.setWindowTitle("HSV Colorspace")

        self.windowRGB = RGB_window()
        self.windowRGB.setWindowTitle("RGB Colorspace")

        self.windowBGR = BGR_window()
        self.windowBGR.setWindowTitle("BGR Colorspace")

        ColorspaceTab = [self.windowHSV, self.windowBGR, self.windowRGB]
        for i in ColorspaceTab:
            i.setGeometry(QtCore.QRect(500, 200, 400, 200))

        self._2DFilter = Filter2D()
        self._2DFilter.setWindowTitle("2D Filter menu")

        self.ImgSmoothing = ImageBlurring()
        self.ImgSmoothing.setWindowTitle("Image Blurring menu")

        self.GaussBlur = GaussBlurring()
        self.GaussBlur.setWindowTitle("Gaussian Blurring menu")

        self.MedBlur = MedianBlurring()
        self.MedBlur.setWindowTitle("Median Blurring menu")

        self.BilateralFilter = BilateralFiltering()
        self.BilateralFilter.setWindowTitle("Bilateral Filtering menu")

        self.sobelfilter = SobelFilter()
        self.sobelfilter.setWindowTitle("Sobel Filter")

        self.scharrfilter = ScharrFilter()
        self.scharrfilter.setWindowTitle("Scharr Filter")

        self.laplacianfilter = LaplacianFilter()
        self.laplacianfilter.setWindowTitle("Laplacian Filter")

        self.cannyfilter = CannyFilter()
        self.cannyfilter.setWindowTitle("Canny Filter")

        self.erosion = ErosionTransform()
        self.erosion.setWindowTitle("Erosion transformation")

        self.dilation = DilationTransform()
        self.dilation.setWindowTitle("Dilation transformation")

        self.opening = OpeningTransform()
        self.opening.setWindowTitle("Opening transformation")

        self.closing = ClosingTransform()
        self.closing.setWindowTitle("Closing transformation")

        self.gradient = GradientTransform()
        self.gradient.setWindowTitle("Gradient transformation")

        self.HistogramDisplay = Histogram()

        FiltersTab = [self._2DFilter, self.ImgSmoothing, self.GaussBlur, self.MedBlur, self.BilateralFilter,
                      self.sobelfilter, self.scharrfilter, self.laplacianfilter, self.cannyfilter,
                      self.erosion, self.dilation, self.opening, self.closing, self.gradient]

        for i in FiltersTab:
            if i == self.sobelfilter:
                i.setGeometry(QtCore.QRect(500, 200, 400, 120))
            elif i == self.scharrfilter:
                i.setGeometry(QtCore.QRect(500, 200, 250, 80))
            elif i == self.laplacianfilter:
                i.setGeometry(QtCore.QRect(500, 200, 400, 90))
            else:
                i.setGeometry(QtCore.QRect(500, 200, 400, 200))

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1500, 680)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ImgDispLabel = QtWidgets.QLabel(self.centralwidget)
        self.ImgDispLabel.setGeometry(QtCore.QRect(11, 11, 671, 591))
        self.ImgDispLabel.setText("")
        self.ImgDispLabel.setPixmap(QtGui.QPixmap("../__PRZENOSINY/ImageTun/gray-color-solid-background-1920x1080.png"))
        self.ImgDispLabel.setObjectName("ImgDispLabel")
        self.ImageProcessingBox = QtWidgets.QGroupBox(self.centralwidget)
        self.ImageProcessingBox.setGeometry(QtCore.QRect(700, 10, 900, 700))
        self.ImageProcessingBox.setObjectName("ImageProcessingBox")
        self.layoutWidget = QtWidgets.QWidget(self.ImageProcessingBox)
        self.layoutWidget.setGeometry(QtCore.QRect(14, 31, 650, 600))
        self.layoutWidget.setObjectName("layoutWidget")
        self.ImgProcessMenuLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.ImgProcessMenuLayout.setContentsMargins(0, 0, 0, 0)
        self.ImgProcessMenuLayout.setObjectName("ImgProcessMenuLayout")

        self.ColorFiltersGeoMorpLayoutThreshLayout = QtWidgets.QGridLayout()
        self.ColorFiltersGeoMorpLayoutThreshLayout.setObjectName("ColorFiltersGeoMorpLayoutThreshLayout")
        self.ColorFiltersGeoMorpLayout = QtWidgets.QGridLayout()
        self.ColorFiltersGeoMorpLayout.setObjectName("ColorFiltersGeoMorpLayout")
        self.ColorFiltersLayout = QtWidgets.QGridLayout()
        self.ColorFiltersLayout.setObjectName("ColorFiltersLayout")
        self.ColorBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.ColorBox.setObjectName("ColorBox")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.ColorBox)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.ColorLayout = QtWidgets.QGridLayout()
        self.ColorLayout.setObjectName("ColorLayout")
        self.BgrButton = QtWidgets.QRadioButton(self.ColorBox)
        self.BgrButton.setObjectName("BgrButton")
        self.ColorLayout.addWidget(self.BgrButton, 0, 0, 1, 1)
        self.RgbButton = QtWidgets.QRadioButton(self.ColorBox)
        self.RgbButton.setObjectName("RgbButton")
        self.ColorLayout.addWidget(self.RgbButton, 1, 0, 1, 1)
        self.HsvButton = QtWidgets.QRadioButton(self.ColorBox)
        self.HsvButton.setObjectName("HsvButton")
        self.ColorLayout.addWidget(self.HsvButton, 2, 0, 1, 1)
        self.GrayButton = QtWidgets.QRadioButton(self.ColorBox)
        self.GrayButton.setObjectName("GrayButton")
        self.ColorLayout.addWidget(self.GrayButton, 3, 0, 1, 1)
        self.gridLayout_9.addLayout(self.ColorLayout, 0, 0, 1, 1)
        self.ColorFiltersLayout.addWidget(self.ColorBox, 0, 0, 1, 1)
        self.HighPassBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.HighPassBox.setObjectName("HighPassBox")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.HighPassBox)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.HighPassLayout = QtWidgets.QVBoxLayout()
        self.HighPassLayout.setObjectName("HighPassLayout")
        self.SobelButton = QtWidgets.QRadioButton(self.HighPassBox)
        self.SobelButton.setObjectName("SobelButton")
        self.HighPassLayout.addWidget(self.SobelButton)
        self.ScharrButton = QtWidgets.QRadioButton(self.HighPassBox)
        self.ScharrButton.setObjectName("ScharrButton")
        self.HighPassLayout.addWidget(self.ScharrButton)
        self.LaplaButton = QtWidgets.QRadioButton(self.HighPassBox)
        self.LaplaButton.setObjectName("LaplaButton")
        self.HighPassLayout.addWidget(self.LaplaButton)
        self.CannyButton = QtWidgets.QRadioButton(self.HighPassBox)
        self.CannyButton.setObjectName("CannyButton")
        self.HighPassLayout.addWidget(self.CannyButton)
        self.gridLayout_5.addLayout(self.HighPassLayout, 0, 0, 1, 1)
        self.ColorFiltersLayout.addWidget(self.HighPassBox, 0, 1, 1, 1)
        self.LowPassBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.LowPassBox.setObjectName("LowPassBox")
        #self.LowPassBox.setGeometry(QtCore.QRect(10, 10, 300, 300))
        self.gridLayout_4 = QtWidgets.QGridLayout(self.LowPassBox)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.LowPassLayout = QtWidgets.QVBoxLayout()
        self.LowPassLayout.setObjectName("LowPassLayout")
        self.ConvButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.ConvButton.setObjectName("ConvButton")
        self.LowPassLayout.addWidget(self.ConvButton)
        self.ImgBlurrButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.ImgBlurrButton.setObjectName("ImgBlurrButton")
        self.LowPassLayout.addWidget(self.ImgBlurrButton)
        self.GaussBlurrButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.GaussBlurrButton.setObjectName("GaussBlurrButton")
        self.LowPassLayout.addWidget(self.GaussBlurrButton)
        self.MedBlurrButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.MedBlurrButton.setObjectName("MedBlurrButton")
        self.LowPassLayout.addWidget(self.MedBlurrButton)
        self.BillateralButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.BillateralButton.setObjectName("BillateralButton")
        self.LowPassLayout.addWidget(self.BillateralButton)
        self.gridLayout_4.addLayout(self.LowPassLayout, 0, 0, 1, 1)
        self.ColorFiltersLayout.addWidget(self.LowPassBox, 0, 2, 1, 1)
        self.ColorFiltersGeoMorpLayout.addLayout(self.ColorFiltersLayout, 0, 0, 1, 1)
        self.TransforLayout = QtWidgets.QVBoxLayout()
        self.TransforLayout.setObjectName("TransforLayout")
        self.MorphoLayout = QtWidgets.QGridLayout()
        self.MorphoLayout.setObjectName("MorphoLayout")
        self.MorphoLabel = QtWidgets.QLabel(self.layoutWidget)
        self.MorphoLabel.setObjectName("MorphoLabel")
        self.MorphoLayout.addWidget(self.MorphoLabel, 0, 0, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.comboBox.setObjectName("comboBox")

        TransformList = ["Erosion", "Dilation", "Opening", "Closing", "Gradient"]
        self.comboBox.addItems(TransformList)
        self.MorphoLayout.addWidget(self.comboBox, 0, 1, 1, 1)
        self.TransforLayout.addLayout(self.MorphoLayout)
        self.GeoLayout = QtWidgets.QGridLayout()
        self.GeoLayout.setObjectName("GeoLayout")
        self.GeoLabel = QtWidgets.QLabel(self.layoutWidget)
        self.GeoLabel.setObjectName("GeoLabel")
        self.GeoLayout.addWidget(self.GeoLabel, 0, 0, 1, 1)
        self.GeometricBox = QtWidgets.QComboBox(self.layoutWidget)
        self.GeometricBox.setEnabled(True)
        self.GeometricBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.GeometricBox.setEditable(False)

        GeoList = ["Scalling", "Translation", "Rotation", "Perspective Transformation"]

        self.GeometricBox.addItems(GeoList)
        self.GeometricBox.setObjectName("GeoBox")
        self.GeoLayout.addWidget(self.GeometricBox, 0, 1, 1, 1)
        self.TransforLayout.addLayout(self.GeoLayout)
        self.ColorFiltersGeoMorpLayout.addLayout(self.TransforLayout, 1, 0, 1, 1)
        self.ColorFiltersGeoMorpLayoutThreshLayout.addLayout(self.ColorFiltersGeoMorpLayout, 0, 0, 1, 1)
        self.ThreshBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.ThreshBox.setObjectName("ThreshBox")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.ThreshBox)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.ThreshTypeBox = QtWidgets.QGroupBox(self.ThreshBox)
        self.ThreshTypeBox.setObjectName("ThreshTypeBox")
        self.ToZeroInvButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.ToZeroInvButton.setGeometry(QtCore.QRect(13, 121, 100, 20))
        self.ToZeroInvButton.setObjectName("ToZeroInvButton")
        self.BinaryButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.BinaryButton.setGeometry(QtCore.QRect(14, 21, 80, 20))
        self.BinaryButton.setObjectName("BinaryButton")
        self.TruncButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.TruncButton.setGeometry(QtCore.QRect(14, 71, 80, 20))
        self.TruncButton.setObjectName("TruncButton")
        self.BinaryInvButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.BinaryInvButton.setGeometry(QtCore.QRect(14, 46, 100, 20))
        self.BinaryInvButton.setObjectName("BinaryInvButton")
        self.ToZeroButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.ToZeroButton.setGeometry(QtCore.QRect(14, 96, 80, 20))
        self.ToZeroButton.setObjectName("ToZeroButton")
        self.gridLayout_10.addWidget(self.ThreshTypeBox, 0, 0, 1, 1)
        self.ThreshSlider = QtWidgets.QSlider(self.ThreshBox)
        self.ThreshSlider.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.ThreshSlider.setOrientation(QtCore.Qt.Horizontal)
        self.ThreshSlider.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.ThreshSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.ThreshSlider.setTickInterval(10)
        self.ThreshSlider.setSingleStep(1)
        self.ThreshSlider.setObjectName("ThreshSlider")
        self.ThreshSlider.setRange(0, 255)
        self.gridLayout_10.addWidget(self.ThreshSlider, 1, 0, 1, 1)
        self.ColorFiltersGeoMorpLayoutThreshLayout.addWidget(self.ThreshBox, 0, 1, 1, 1)
        self.ImgProcessMenuLayout.addLayout(self.ColorFiltersGeoMorpLayoutThreshLayout, 0, 0, 1, 1)


        self.BrightnessLayout = QtWidgets.QGridLayout()
        self.BrightnessLayout.setObjectName("BrightnessLayout")
        self.BrightnessBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.BrightnessBox.setObjectName("BrightnessBox")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.BrightnessBox)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.BrightnessSlider = QtWidgets.QSlider(self.BrightnessBox)
        self.BrightnessSlider.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.BrightnessSlider.setOrientation(QtCore.Qt.Horizontal)
        self.BrightnessSlider.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.BrightnessSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.BrightnessSlider.setTickInterval(10)
        self.BrightnessSlider.setSingleStep(1)
        self.BrightnessSlider.setObjectName("BrightnessSlider")
        self.BrightnessSlider.setRange(1, 255)
        self.gridLayout_17.addWidget(self.BrightnessSlider, 0, 0, 1, 1)
        self.BrightnessLayout.addWidget(self.BrightnessBox, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.BrightnessLayout.addItem(spacerItem, 0, 1, 1, 1)
        self.ImgProcessMenuLayout.addLayout(self.BrightnessLayout, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.pbImage = QtWidgets.QPushButton(self.layoutWidget)
        self.pbImage.setGeometry(QtCore.QRect(455, 255, 185, 50))
        self.pbImage.setText(" Load histogram ")
        self.ImgProcessMenuLayout.addWidget(self.HistogramDisplay, 2, 0, 1, 1)






        self.FileMenu = QtWidgets.QMenuBar(MainWindow)
        self.FileMenu.setGeometry(QtCore.QRect(0, 0, 1300, 21))
        self.FileMenu.setObjectName("FileMenu")
        self.menuFile = QtWidgets.QMenu(self.FileMenu)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.FileMenu)
        self.menuHelp.setTearOffEnabled(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Cop/help_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuHelp.setIcon(icon)
        self.menuHelp.setToolTipsVisible(False)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.FileMenu)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.statusbar.showMessage('Ready', 5000)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_as = QtWidgets.QAction(MainWindow)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionColor = QtWidgets.QAction(MainWindow)
        self.actionColor.setObjectName("actionColor")
        self.actionBlur = QtWidgets.QAction(MainWindow)
        self.actionBlur.setObjectName("actionBlur")
        self.actionBrightnes = QtWidgets.QAction(MainWindow)
        self.actionBrightnes.setObjectName("actionBrightnes")
        self.actionThresholding = QtWidgets.QAction(MainWindow)
        self.actionThresholding.setObjectName("actionThresholding")
        self.actionGeometric = QtWidgets.QAction(MainWindow)
        self.actionGeometric.setObjectName("actionGeometric")
        self.actionLaplacian = QtWidgets.QAction(MainWindow)
        self.actionLaplacian.setObjectName("actionLaplacian")
        self.actionScharr = QtWidgets.QAction(MainWindow)
        self.actionScharr.setObjectName("actionScharr")
        self.actionSobel = QtWidgets.QAction(MainWindow)
        self.actionSobel.setObjectName("actionSobel")
        self.actionCanny = QtWidgets.QAction(MainWindow)
        self.actionCanny.setObjectName("actionCanny")
        # Add action to menu
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuFile.addAction(self.actionExit)
        self.FileMenu.addAction(self.menuFile.menuAction())
        self.FileMenu.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.GeometricBox.activated.connect(self.ActionGeoBox)
        self.comboBox.activated.connect(self.ActionTransformBox)
        self.BrightnessSlider.valueChanged['int'].connect(self.BrightValue) # type: ignore
        # Menu File buttons
        self.actionOpen.triggered.connect(self.loadImage) # type: ignore
        self.actionSave.triggered.connect(self.saveImage) # type: ignore
        self.actionSave_as.triggered.connect(self.saveAsImage) # type: ignore
        self.actionExit.triggered.connect(self.CloseApp) # type: ignore
        # Low-pass filtering buttons
        self.MedBlurrButton.clicked.connect(self.LowPassAction) # type: ignore
        self.BillateralButton.clicked.connect(self.LowPassAction) # type: ignore
        self.GaussBlurrButton.clicked.connect(self.LowPassAction) # type: ignore
        self.ImgBlurrButton.clicked.connect(self.LowPassAction) # type: ignore
        self.ConvButton.clicked.connect(self.LowPassAction) # type: ignore
        # Changing colorspace buttons
        self.BgrButton.clicked.connect(self.ChangeColorAction) # type: ignore
        self.RgbButton.clicked.connect(self.ChangeColorAction) # type: ignore
        self.HsvButton.clicked.connect(self.ChangeColorAction) # type: ignore
        self.GrayButton.clicked.connect(self.ChangeColorAction) # type: ignore
        # High-pass filtering buttons
        self.SobelButton.clicked.connect(self.HighPassAction) # type: ignore
        self.ScharrButton.clicked.connect(self.HighPassAction) # type: ignore
        self.LaplaButton.clicked.connect(self.HighPassAction) # type: ignore
        self.CannyButton.clicked.connect(self.HighPassAction) # type: ignore
        # Thresholding buttons
        self.ToZeroInvButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        self.TruncButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        self.BinaryInvButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        self.BinaryButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        self.ToZeroButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pbImage.clicked.connect(self.display_histogram)

        # variables for image location and info from img
        self.filename = None

        self.brightness_val_now = 0
        self.thresh_val_now = 0
        self.thresh_type = None
        self.ColorType = 0 # variable for colorspace type
        self.loadimage = None
        self.LowPassButton = None
        self.HighPassValue = 0
        self.TransformNum = 0

    def display_histogram(self):

        self.HistogramDisplay.canvas.sumbu1.clear()
        if self.ColorType != 2:
            color = ('b', 'g', 'r')
            for i, col in enumerate(color):
                #TODO prepare histogram for grayscale images
                histo = cv2.calcHist([self.image], [i], None, [256], [0, 256])
                self.HistogramDisplay.canvas.sumbu1.plot(histo, color=col, linewidth=2.0)
                self.HistogramDisplay.canvas.sumbu1.set_ylabel('Y', color='blue')
                self.HistogramDisplay.canvas.sumbu1.set_xlabel('X', color='blue')
                self.HistogramDisplay.canvas.sumbu1.set_title(' Histogram ')
                self.HistogramDisplay.canvas.sumbu1.set_facecolor('xkcd:wheat')
                self.HistogramDisplay.canvas.sumbu1.grid(True)
        elif self.ColorType == 2:
                color = ('g')
                for i, col in enumerate(color):
                    histo = cv2.calcHist([self.image.ravel()],[i], None, [256], [0, 255])
                    self.HistogramDisplay.canvas.sumbu1.plot(histo, linewidth=2.0)
                    self.HistogramDisplay.canvas.sumbu1.set_ylabel('Y', color='blue')
                    self.HistogramDisplay.canvas.sumbu1.set_xlabel('X', color='blue')
                    self.HistogramDisplay.canvas.sumbu1.set_title(' Histogram ')
                    self.HistogramDisplay.canvas.sumbu1.set_facecolor('xkcd:wheat')
                    self.HistogramDisplay.canvas.sumbu1.grid(True)
        self.HistogramDisplay.canvas.draw()

    ''' func used to load images selected by user and set it to label '''
    def loadImage(self):
        self.filename = QtWidgets.QFileDialog.getOpenFileName(filter = " (*.jpg *.png)")[0]
        self.image = cv2.imread(self.filename)
        if self.image is not None:
            self.setImage(self.image)
            self.statusbar.showMessage(f"Loaded image: {self.filename}")


    ''' func used to resize selected images and convert them to QImage '''
    def setImage(self, image):
        image = imutils.resize(image, 600, 500)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        if (frame is not None) and (image is not None):
            image = QtGui.QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QtGui.QImage.Format_RGB888)
            self.ImgDispLabel.setPixmap(QtGui.QPixmap.fromImage(image))
    ''' func used to save processed image by menu '''
    def saveImage(self):
        cv2.imwrite(self.filename, self.image)
        print("Saved: ", self.filename)
        self.statusbar.showMessage("Saving image: %" %(self.saveName))

    ''' func used to save processed image with name and location selected by user by menu '''
    def saveAsImage(self):
        self.saveName = QtWidgets.QFileDialog.getSaveFileName(MainWindow, "Save file", self.filename, "(*.jpg *.png)")[0]
        cv2.imwrite(self.saveName, self.image)
        print("Saved as: ", self.saveName)
        self.statusbar.showMessage("Saving image: %" %(self.saveName))

    ''' func used to close app by menu '''
    def CloseApp(self):
        print("Application is being closed.")
        self.statusbar.showMessage("Closing application...")
        app.quit()

    ''' func used to select and use proper geometric transformations on processed image '''
    def ActionGeoBox(self, index):
        #TODO prepare additional windows for set proper values!
        ctext = self.GeometricBox.itemText(index) # get proper transformation
        if ctext == "Scalling":
            self.image = Scalling.ScaleImg(self, self.image, 2, 2, cv2.INTER_LINEAR)  #TODO add value_x and value_y of Scalling
            self.setImage(self.image)
            self.statusbar.showMessage("Scalling transformation of image...")
        elif ctext =="Translation":
            self.image = Translation.MoveImg(self, self.image, -100, 200)  #TODO add value_x and value_y of moving
            self.setImage(self.image)
            self.statusbar.showMessage("Translation transformation of image...")

        elif ctext == "Rotation":
            self.image = Rotation.RotateImg(self, self.image, 90, 1) #TODO add value of selected angle
            self.setImage(self.image)
            self.statusbar.showMessage("Rotation transformation of image...")

        else:
            print("Perspective Transform")
            self.image = PerspectiveTrans.GetPerspective(self, self.image)
            self.setImage(self.image)
            self.statusbar.showMessage("Perspective transformation of image...")
        self.ColorType = 0 # image in RGB scale

    def ActionTransformBox(self, index):
        indexText = self.comboBox.itemText(index)
        if indexText == "Erosion":
            if self.erosion.isVisible():
                self.erosion.hide()
            else:
                self.erosion.show()
                self.erosion.getImage(self.image)
                self.erosion.KernelSlider.valueChanged['int'].connect(self.erosion.getKernelSize)
                self.erosion.IterationSlider.valueChanged['int'].connect(self.erosion.getIteration)
                self.erosion.ApplyButton.clicked.connect(self.UpdateTransform)
            self.TransformNum = 0
            self.statusbar.showMessage("Erosion transformation of image...")

        elif indexText == "Dilation":
            if self.dilation.isVisible():
                self.dilation.hide()
            else:
                self.dilation.show()
                self.dilation.getImage(self.image)
                self.dilation.KernelSlider.valueChanged['int'].connect(self.dilation.getKernelSize)
                self.dilation.IterationSlider.valueChanged['int'].connect(self.dilation.getIteration)
                self.dilation.ApplyButton.clicked.connect(self.UpdateTransform)
            self.TransformNum = 1
            self.statusbar.showMessage("Dilation transformation of image...")

        elif indexText == "Opening":
            if self.opening.isVisible():
                self.opening.hide()
            else:
                self.opening.show()
                self.opening.getImage(self.image)
                self.opening.KernelSlider.valueChanged['int'].connect(self.opening.getKernelSize)
                self.opening.ApplyButton.clicked.connect(self.UpdateTransform)
            self.TransformNum = 2
            self.statusbar.showMessage("Opening transformation of image...")

        elif indexText == "Closing":
            if self.closing.isVisible():
                self.closing.hide()
            else:
                self.closing.show()
                self.closing.getImage(self.image)
                self.closing.KernelSlider.valueChanged['int'].connect(self.closing.getKernelSize)
                self.closing.ApplyButton.clicked.connect(self.UpdateTransform)
            self.TransformNum = 3
            self.statusbar.showMessage("Closing transformation of image...")

        elif indexText == "Gradient":
            if self.gradient.isVisible():
                self.gradient.hide()
            else:
                self.gradient.show()
                self.gradient.getImage(self.image)
                self.gradient.KernelSlider.valueChanged['int'].connect(self.gradient.getKernelSize)
                self.gradient.ApplyButton.clicked.connect(self.UpdateTransform)
            self.TransformNum = 4
            self.statusbar.showMessage("Gradient transformation of image...")

    def UpdateTransform(self):
        if self.TransformNum == 0:
            self.image = self.erosion.SetValue()
        elif self.TransformNum == 1:
            self.image = self.dilation.SetValue()
        elif self.TransformNum == 2:
            self.image = self.opening.SetValue()
        elif self.TransformNum == 3:
            self.image = self.closing.SetValue()
        elif self.TransformNum == 4:
            self.image = self.gradient.SetValue()
        self.ColorType = 2 # image is in gray scale
        self.setImage(self.image)

    ''' func used to take value from BrightnessSlider (1 - 255) '''
    def BrightValue(self, value):
        self.brightness_val_now = value
        print("Brightness value is: ", value)
        self.UpdateImg()

    ''' func used to set brightness of image appropriate to value selected by user '''
    def SetBrightValue(self):
        image = cv2.convertScaleAbs(self.image, alpha = 0.5, beta = self.brightness_val_now)
        self.statusbar.showMessage("Setting brightness of image...")
        self.ColorType = 0 # Image is in RGB scale
        return image

    ''' func used to take value from ThreshSlider (0 - 255) '''
    def ThreshValue(self, value):
        self.thresh_val_now = value
        print("Threshing value is: ", value)
        image = self.SetThreshValue()
        self.setImage(image)

    ''' func used to set thresh of image appropriate to value and threshing type selected by user '''
    def SetThreshValue(self):
        image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        self.ColorType = 2 # 2 is gray
        ret, image = cv.threshold(image, self.thresh_val_now, 255, self.thresh_type)
        self.statusbar.showMessage("Thresholding of image...")
        self.ColorType = 2 # Image is in gray scale
        return image

    ''' func used by brightness functions to update image '''
    def UpdateImg(self):
        image = self.SetBrightValue()
        self.setImage(image)

    ''' func used to set colorspace of image chosen by operator '''
    def ChangeColorAction(self):
        if self.RgbButton.isChecked():
            if (self.ColorType == 0): # RGB
                pass
            elif (self.ColorType == 1): # HSV
                self.image = cv2.cvtColor(self.image, cv2.COLOR_HSV2RGB)
            elif (self.ColorType == 2): # Gray
                self.image = cv2.imread(self.filename)
            elif (self.ColorType == 3): # BGR
                self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
            self.ColorType = 0
            if self.windowRGB.isVisible():
                self.windowRGB.hide()
            else:
                self.windowRGB.show()
                self.windowRGB.GetImg(self.image)
                self.windowRGB.FirstSlider.valueChanged['int'].connect(self.windowRGB.FirstGetValue)
                self.windowRGB.FirstSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowRGB.SecondSlider.valueChanged['int'].connect(self.windowRGB.SecondGetValue)
                self.windowRGB.SecondSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowRGB.ThirdSlider.valueChanged['int'].connect(self.windowRGB.ThirdGetValue)
                self.windowRGB.ThirdSlider.valueChanged['int'].connect(self.UpdateColorspace)
            self.statusbar.showMessage("Changing colorspace of image to RGB...")

        elif self.HsvButton.isChecked():
            if (self.ColorType == 0): # RGB
                self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2HSV)
            elif (self.ColorType == 1): # HSV
                pass
            elif (self.ColorType == 2): # GRAY
                self.image = cv2.imread(self.filename)
            elif (self.ColorType == 3): # BGR
                self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2HSV)
            if self.windowHSV.isVisible():
                self.windowHSV.hide()
            else:
                self.windowHSV.show()
                self.windowHSV.GetImg(self.image)
                self.windowHSV.FirstSlider.valueChanged['int'].connect(self.windowHSV.FirstGetValue)
                self.windowHSV.FirstSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowHSV.SecondSlider.valueChanged['int'].connect(self.windowHSV.SecondGetValue)
                self.windowHSV.SecondSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowHSV.ThirdSlider.valueChanged['int'].connect(self.windowHSV.ThirdGetValue)
                self.windowHSV.ThirdSlider.valueChanged['int'].connect(self.UpdateColorspace)
            self.statusbar.showMessage("Changing colorspace of image to HSV...")
            self.ColorType = 1

        elif self.GrayButton.isChecked():
            if (self.ColorType == 0): # RGB
                self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)
            elif (self.ColorType == 1): # HSV
                image = cv2.cvtColor(self.image, cv2.COLOR_HSV2RGB)
                self.image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            elif (self.ColorType == 2): # GRAY
                pass
            elif (self.ColorType == 3): # BGR
                self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
            self.setImage(self.image)
            self.statusbar.showMessage("Changing colorspace of image to Gray...")
            self.ColorType = 2

        elif self.BgrButton.isChecked():
            if (self.ColorType == 0):  # RGB
                self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2BGR)
            elif (self.ColorType == 1):  # HSV
                self.image = cv2.cvtColor(self.image, cv2.COLOR_HSV2BGR)
            elif (self.ColorType == 2):  # GRAY
                self.image = cv2.imread(self.filename)
            elif (self.ColorType == 3):  # BGR
                pass
            if self.windowBGR.isVisible():
                self.windowBGR.hide()
            else:
                self.windowBGR.show()
                self.windowBGR.GetImg(self.image)
                self.windowBGR.FirstSlider.valueChanged['int'].connect(self.windowBGR.FirstGetValue)
                self.windowBGR.FirstSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowBGR.SecondSlider.valueChanged['int'].connect(self.windowBGR.SecondGetValue)
                self.windowBGR.SecondSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowBGR.ThirdSlider.valueChanged['int'].connect(self.windowBGR.ThirdGetValue)
                self.windowBGR.ThirdSlider.valueChanged['int'].connect(self.UpdateColorspace)
            self.statusbar.showMessage("Changing colorspace of image to BGR...")
            self.ColorType = 3

    ''' func to update image with values from sliders, depends on the current chosen colorspace '''
    def UpdateColorspace(self):
        if self.ColorType == 0:
            self.image = self.windowRGB.SetValue()
        if self.ColorType == 1:
            self.image = self.windowHSV.SetValue()
        elif self.ColorType == 3:
            self.image = self.windowBGR.SetValue()
        self.setImage(self.image)

    ''' func to update image with values from sliders, depends on the chosen high-pass filter '''
    def UpdateHighPass(self):
        if self.HighPassValue == 0:
            image = self.sobelfilter.SetFilter()
        elif self.HighPassValue == 1:
            image = self.scharrfilter.getAxis()
        elif self.HighPassValue == 2:
            image = self.laplacianfilter.SetFilter()
        elif self.HighPassValue == 3:
            image = self.cannyfilter.SetFilter()
        if image is not None:
            image = QtGui.QImage(image, image.shape[1], image.shape[0],
                                image.strides[0], QtGui.QImage.Format_Grayscale8)
            self.ImgDispLabel.setPixmap(QtGui.QPixmap.fromImage(image))

    ''' func used to set high-pass filter of image chosen by operator '''
    def HighPassAction(self):
        if self.SobelButton.isChecked():
            if self.sobelfilter.isVisible():
                self.sobelfilter.hide()
            else:
                self.sobelfilter.show()
                self.sobelfilter.getImg(self.image)
                self.sobelfilter.RadioButton_1.clicked.connect(self.sobelfilter.SetFilter)
                self.sobelfilter.RadioButton_2.clicked.connect(self.sobelfilter.SetFilter)
                self.sobelfilter.Slider_1.valueChanged['int'].connect(self.sobelfilter.getValue)
                self.sobelfilter.Slider_1.valueChanged['int'].connect(self.UpdateHighPass)
            self.HighPassValue = 0 # It is Sobel filter
            self.statusbar.showMessage("Sobel filter transformation of image...")

        elif self.ScharrButton.isChecked():
            if self.scharrfilter.isVisible():
                self.scharrfilter.hide()
            else:
                self.scharrfilter.show()
                self.scharrfilter.getImg(self.image)
                self.scharrfilter.RadioButton_1.clicked.connect(self.scharrfilter.getAxis)
                self.scharrfilter.RadioButton_1.clicked.connect(self.UpdateHighPass)
                self.scharrfilter.RadioButton_2.clicked.connect(self.scharrfilter.getAxis)
                self.scharrfilter.RadioButton_2.clicked.connect(self.UpdateHighPass)
            self.HighPassValue = 1 # It is Scharr filter
            self.statusbar.showMessage("Scharr filter transformation of image...")

        elif self.LaplaButton.isChecked():
            if self.laplacianfilter.isVisible():
                self.laplacianfilter.hide()
            else:
                self.laplacianfilter.show()
                self.laplacianfilter.getImg(self.image)
                self.laplacianfilter.Slider_1.valueChanged['int'].connect(self.laplacianfilter.getValue)
                self.laplacianfilter.Slider_1.valueChanged['int'].connect(self.UpdateHighPass)
            self.HighPassValue = 2  # It is Laplacian filter
            self.statusbar.showMessage("Laplacian filter transformation of image...")

        elif self.CannyButton.isChecked():
            if self.cannyfilter.isVisible():
                self.cannyfilter.hide()
            else:
                self.cannyfilter.show()
                self.cannyfilter.getImg(self.image)
                self.cannyfilter.Slider_1.valueChanged['int'].connect(self.cannyfilter.FirstGetValue)
                self.cannyfilter.Slider_1.valueChanged['int'].connect(self.UpdateHighPass)
                self.cannyfilter.Slider_2.valueChanged['int'].connect(self.cannyfilter.SecondGetValue)
                self.cannyfilter.Slider_2.valueChanged['int'].connect(self.UpdateHighPass)
            self.HighPassValue = 3 # It is Canny filter
            self.statusbar.showMessage("Canny filter transformation of image...")
        self.ColorType = 2  # image is in gray scale

    ''' func to update image with values from sliders, depends on the chosen low-pass filter '''
    def UpdateLowPass(self):
        if self.LowPassButton == 0:
            self.image = self._2DFilter.SetImg()
        elif self.LowPassButton == 1:
            self.image = self.ImgSmoothing.SetImg()
        elif self.LowPassButton == 2:
            self.image = self.GaussBlur.SetImg()
        elif self.LowPassButton == 3:
            self.image = self.MedBlur.SetImg()
        else:
            self.image = self.BilateralFilter.SetImg()
        self.setImage(self.image)

    ''' func used to set low-pass filter of image chosen by operator '''
    def LowPassAction(self):
        if self.ConvButton.isChecked():
            self.LowPassButton = 0
            if self._2DFilter.isVisible():
                self._2DFilter.hide()
            else:
                self._2DFilter.show()
                self._2DFilter.GetImg(self.image)
                self._2DFilter.Slider.valueChanged['int'].connect(self._2DFilter.GetKernelSize)
                self._2DFilter.Slider.valueChanged['int'].connect(self.UpdateLowPass)
            self.statusbar.showMessage("2D Convolution filter...")

        elif self.ImgBlurrButton.isChecked():
            self.LowPassButton = 1
            if self.ImgSmoothing.isVisible():
                self.ImgSmoothing.hide()
            else:
                self.ImgSmoothing.show()
                self.ImgSmoothing.GetImg(self.image)
                self.ImgSmoothing.Slider.valueChanged['int'].connect(self.ImgSmoothing.GetKernelSize)
                self.ImgSmoothing.Slider.valueChanged['int'].connect(self.UpdateLowPass)
            self.statusbar.showMessage("Image Blurring filter...")

        elif self.GaussBlurrButton.isChecked():
            self.LowPassButton = 2
            if self.GaussBlur.isVisible():
                self.GaussBlur.hide()
            else:
                self.GaussBlur.show()
                self.GaussBlur.GetImg(self.image)
                self.GaussBlur.Slider.valueChanged['int'].connect(self.GaussBlur.GetKernelSize)
                self.GaussBlur.Slider.valueChanged['int'].connect(self.UpdateLowPass)
            self.statusbar.showMessage("Gaussian Blurring filter...")

        elif self.MedBlurrButton.isChecked():
            self.LowPassButton = 3
            if self.MedBlur.isVisible():
                self.MedBlur.hide()
            else:
                self.MedBlur.show()
                self.MedBlur.GetImg(self.image)
                self.MedBlur.Slider.valueChanged['int'].connect(self.MedBlur.GetNoiseLevel)
                self.MedBlur.Slider.valueChanged['int'].connect(self.UpdateLowPass)
            self.statusbar.showMessage("Median Blurring filter...")

        elif self.BillateralButton.isChecked():
            self.LowPassButton = 4
            if self.BilateralFilter.isVisible():
                self.BilateralFilter.hide()
            else:
                self.BilateralFilter.show()
                self.BilateralFilter.GetImg(self.image)
                self.BilateralFilter.Slider.valueChanged['int'].connect(self.BilateralFilter.GetKernelSize)
                self.BilateralFilter.Slider.valueChanged['int'].connect(self.UpdateLowPass)
            self.statusbar.showMessage("Bilateral filtering of image...")

    ''' func used to display histogram of current displayed image. Used canvas to it.'''
    def DisplayHistogram(self):
        pass

    ''' func used to check which thresholding type is selected and set it '''
    def ThreshTypesAction(self):
        if self.BinaryButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue)  # type: ignore
            self.thresh_type = cv.THRESH_BINARY
            print("Binary")
            self.statusbar.showMessage("Binary thresholding of image...")

        elif self.BinaryInvButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue) # type:ignore
            self.thresh_type = cv2.THRESH_BINARY_INV
            print("Binary INV")
            self.statusbar.showMessage("Binary inverse thresholding of image...")

        elif self.TruncButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue)
            self.thresh_type = cv2.THRESH_TRUNC
            print("Trunc")
            self.statusbar.showMessage("Truncate thresholding of image...")

        elif self.ToZeroButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue)
            self.thresh_type = cv2.THRESH_TOZERO
            print("ToZero")
            self.statusbar.showMessage("Zero thresholding of image...")

        elif self.ToZeroInvButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue)
            self.thresh_type = cv2.THRESH_TOZERO_INV
            print("ToZeroINV")
            self.statusbar.showMessage("Zero inverse thresholding of image...")


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.ImageProcessingBox.setTitle(_translate("MainWindow", "Image Processing"))
        self.ColorBox.setTitle(_translate("MainWindow", "Colorspace"))
        self.BgrButton.setText(_translate("MainWindow", "BGR"))
        self.RgbButton.setText(_translate("MainWindow", "RGB"))
        self.HsvButton.setText(_translate("MainWindow", "HSV"))
        self.GrayButton.setText(_translate("MainWindow", "GRAY"))
        self.HighPassBox.setTitle(_translate("MainWindow", "High-pass filtering"))
        self.SobelButton.setText(_translate("MainWindow", "Sobel"))
        self.ScharrButton.setText(_translate("MainWindow", "Scharr"))
        self.LaplaButton.setText(_translate("MainWindow", "Laplacian"))
        self.CannyButton.setText(_translate("MainWindow", "Canny"))
        self.LowPassBox.setTitle(_translate("MainWindow", "Low-pass filtering"))
        self.ConvButton.setText(_translate("MainWindow", "2D Convolution"))
        self.ImgBlurrButton.setText(_translate("MainWindow", "Image Blurring"))
        self.GaussBlurrButton.setText(_translate("MainWindow", "Gaussian Blurring"))
        self.MedBlurrButton.setText(_translate("MainWindow", "Median Blurring"))
        self.BillateralButton.setText(_translate("MainWindow", "Billateral"))
        self.MorphoLabel.setText(_translate("MainWindow", "Morphological transformation"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Erosion"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Dilation"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Opening"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Closing"))
        self.GeoLabel.setText(_translate("MainWindow", "Geometric transformation"))
        self.GeometricBox.setCurrentText(_translate("MainWindow", "Scalling"))
        self.GeometricBox.setItemText(0, _translate("MainWindow", "Scalling"))
        self.GeometricBox.setItemText(1, _translate("MainWindow", "Translation"))
        self.GeometricBox.setItemText(2, _translate("MainWindow", "Rotation"))
        self.GeometricBox.setItemText(3, _translate("MainWindow", "Perspective transformation"))
        self.ThreshBox.setTitle(_translate("MainWindow", "Thresholding"))
        self.ThreshTypeBox.setTitle(_translate("MainWindow", "Thresholding types:"))
        self.ToZeroInvButton.setText(_translate("MainWindow", "To zero inv"))
        self.BinaryButton.setText(_translate("MainWindow", "Binary"))
        self.TruncButton.setText(_translate("MainWindow", "Trunc"))
        self.BinaryInvButton.setText(_translate("MainWindow", "Binary inv"))
        self.ToZeroButton.setText(_translate("MainWindow", "To zero"))
        self.BrightnessBox.setTitle(_translate("MainWindow", "Brightness"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionOpen.setText(_translate("MainWindow", "Open..."))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSave_as.setText(_translate("MainWindow", "Save as..."))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionColor.setText(_translate("MainWindow", "Color"))
        self.actionBlur.setText(_translate("MainWindow", "Blur"))
        self.actionBrightnes.setText(_translate("MainWindow", "Brightnes"))
        self.actionThresholding.setText(_translate("MainWindow", "Thresholding"))
        self.actionGeometric.setText(_translate("MainWindow", "Geometric"))
        self.actionLaplacian.setText(_translate("MainWindow", "Laplacian"))
        self.actionScharr.setText(_translate("MainWindow", "Scharr"))
        self.actionSobel.setText(_translate("MainWindow", "Sobel"))
        self.actionCanny.setText(_translate("MainWindow", "Canny"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
