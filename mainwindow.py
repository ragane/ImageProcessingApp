# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2, imutils

from Transcription import *
from FilteringMethods import *
from FilteringMethods import Filters
from AdditionalColorspaceWindow import HSV_window, RGB_window, BGR_window
from LowPassFilterWindow import (
    Filter2D,
    ImageBlurring,
    GaussBlurring,
    MedianBlurring,
    BilateralFiltering,
)
from PyQt5 import *

class Ui_MainWindow(object):


    def __init__(self, *args):
        super().__init__()
        self.windowHSV = HSV_window()
        self.windowHSV.setGeometry(QtCore.QRect(500, 200, 400, 200))
        self.windowHSV.setWindowTitle("HSV menu")

        self.windowRGB = RGB_window()
        self.windowRGB.setGeometry(QtCore.QRect(500, 200, 400, 200))
        self.windowRGB.setWindowTitle("RGB menu")

        self.windowBGR = BGR_window()
        self.windowBGR.setGeometry(QtCore.QRect(500, 200, 400, 200))
        self.windowBGR.setWindowTitle("BGR menu")

        self._2DFilter = Filter2D()
        self._2DFilter.setGeometry(QtCore.QRect(500, 200, 400, 200))
        self._2DFilter.setWindowTitle("2D Filter menu")

        self.ImgSmoothing = ImageBlurring()
        self.ImgSmoothing.setGeometry(QtCore.QRect(500, 200, 400, 200))
        self.ImgSmoothing.setWindowTitle("Image Blurring menu")

        self.GaussBlur = GaussBlurring()
        self.GaussBlur.setGeometry(QtCore.QRect(500, 200, 400, 200))
        self.GaussBlur.setWindowTitle("Gaussian Blurring menu")

        self.MedBlur = MedianBlurring()
        self.MedBlur.setGeometry(QtCore.QRect(500, 200, 400, 200))
        self.MedBlur.setWindowTitle("Median Blurring menu")

        self.BilateralFilter = BilateralFiltering()
        self.BilateralFilter.setGeometry(QtCore.QRect(500, 200, 400, 200))
        self.BilateralFilter.setWindowTitle("Bilateral Filtering menu")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1500, 680)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ImgDispLabel = QtWidgets.QLabel(self.centralwidget)
        self.ImgDispLabel.setGeometry(QtCore.QRect(11, 11, 671, 591))
        self.ImgDispLabel.setText("")
        self.ImgDispLabel.setPixmap(QtGui.QPixmap("../__PRZENOSINY/ImageTun/gray-color-solid-background-1920x1080.png"))
        self.ImgDispLabel.setObjectName("ImgDispLabel")
        self.ImageProcessingBox = QtWidgets.QGroupBox(self.centralwidget)
        self.ImageProcessingBox.setGeometry(QtCore.QRect(700, 10, 781, 591))
        self.ImageProcessingBox.setObjectName("ImageProcessingBox")

        self.layoutWidget = QtWidgets.QWidget(self.ImageProcessingBox)
        self.layoutWidget.setGeometry(QtCore.QRect(14, 31, 550, 296))
        self.layoutWidget.setObjectName("layoutWidget")
        self.ImgProcessMenuLayout = QtWidgets.QGridLayout(self.layoutWidget)
        self.ImgProcessMenuLayout.setContentsMargins(0, 0, 0, 0)
        self.ImgProcessMenuLayout.setObjectName("ImgProcessMenuLayout")
        self.ColorFiltersGeoMorpLayoutThreshLayout = QtWidgets.QGridLayout()
        self.ColorFiltersGeoMorpLayoutThreshLayout.setObjectName("ColorFiltersGeoMorpLayoutThreshLayout")
        self.ColorFiltersGeoMorpLayout = QtWidgets.QGridLayout()
        self.ColorFiltersGeoMorpLayout.setObjectName("ColorFiltersGeoMorpLayout")
        self.ColorFiltersLayout = QtWidgets.QGridLayout()
        self.ColorFiltersLayout.setObjectName("ColorFiltersLayout")

        #TODO self.addToolBox(NavigationToolBar(self.widgetDisplay.canvas, self))

        self.ColorBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.ColorBox.setObjectName("ColorBox")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.ColorBox)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.ColorLayout = QtWidgets.QGridLayout()
        self.ColorLayout.setObjectName("ColorLayout")
        self.BgrButton = QtWidgets.QRadioButton(self.ColorBox)
        self.BgrButton.setObjectName("BgrButton")
        self.ColorLayout.addWidget(self.BgrButton, 0, 0, 1, 1)
        self.RgbButton = QtWidgets.QRadioButton(self.ColorBox)
        self.RgbButton.setObjectName("RgbButton")
        self.ColorLayout.addWidget(self.RgbButton, 1, 0, 1, 1)
        self.HsvButton = QtWidgets.QRadioButton(self.ColorBox)
        self.HsvButton.setObjectName("HsvButton")
        self.ColorLayout.addWidget(self.HsvButton, 2, 0, 1, 1)
        self.GrayButton = QtWidgets.QRadioButton(self.ColorBox)
        self.GrayButton.setObjectName("GrayButton")
        self.ColorLayout.addWidget(self.GrayButton, 3, 0, 1, 1)
        self.gridLayout_9.addLayout(self.ColorLayout, 0, 0, 1, 1)
        self.ColorFiltersLayout.addWidget(self.ColorBox, 0, 0, 1, 1)
        self.HighPassBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.HighPassBox.setObjectName("HighPassBox")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.HighPassBox)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.HighPassLayout = QtWidgets.QVBoxLayout()
        self.HighPassLayout.setObjectName("HighPassLayout")
        self.SobelButton = QtWidgets.QRadioButton(self.HighPassBox)
        self.SobelButton.setObjectName("SobelButton")
        self.HighPassLayout.addWidget(self.SobelButton)
        self.ScharrButton = QtWidgets.QRadioButton(self.HighPassBox)
        self.ScharrButton.setObjectName("ScharrButton")
        self.HighPassLayout.addWidget(self.ScharrButton)
        self.LaplaButton = QtWidgets.QRadioButton(self.HighPassBox)
        self.LaplaButton.setObjectName("LaplaButton")
        self.HighPassLayout.addWidget(self.LaplaButton)
        self.CannyButton = QtWidgets.QRadioButton(self.HighPassBox)
        self.CannyButton.setObjectName("CannyButton")
        self.HighPassLayout.addWidget(self.CannyButton)
        self.gridLayout_5.addLayout(self.HighPassLayout, 0, 0, 1, 1)
        self.ColorFiltersLayout.addWidget(self.HighPassBox, 0, 1, 1, 1)
        self.LowPassBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.LowPassBox.setObjectName("LowPassBox")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.LowPassBox)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.LowPassLayout = QtWidgets.QVBoxLayout()
        self.LowPassLayout.setObjectName("LowPassLayout")
        self.ConvButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.ConvButton.setObjectName("ConvButton")
        self.LowPassLayout.addWidget(self.ConvButton)
        self.ImgBlurrButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.ImgBlurrButton.setObjectName("ImgBlurrButton")
        self.LowPassLayout.addWidget(self.ImgBlurrButton)
        self.GaussBlurrButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.GaussBlurrButton.setObjectName("GaussBlurrButton")
        self.LowPassLayout.addWidget(self.GaussBlurrButton)
        self.MedBlurrButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.MedBlurrButton.setObjectName("MedBlurrButton")
        self.LowPassLayout.addWidget(self.MedBlurrButton)
        self.BillateralButton = QtWidgets.QRadioButton(self.LowPassBox)
        self.BillateralButton.setObjectName("BillateralButton")
        self.LowPassLayout.addWidget(self.BillateralButton)
        self.gridLayout_4.addLayout(self.LowPassLayout, 0, 0, 1, 1)
        self.ColorFiltersLayout.addWidget(self.LowPassBox, 0, 2, 1, 1)
        self.ColorFiltersGeoMorpLayout.addLayout(self.ColorFiltersLayout, 0, 0, 1, 1)
        self.TransforLayout = QtWidgets.QVBoxLayout()
        self.TransforLayout.setObjectName("TransforLayout")
        self.MorphoLayout = QtWidgets.QGridLayout()
        self.MorphoLayout.setObjectName("MorphoLayout")
        self.MorphoLabel = QtWidgets.QLabel(self.layoutWidget)
        self.MorphoLabel.setObjectName("MorphoLabel")
        self.MorphoLayout.addWidget(self.MorphoLabel, 0, 0, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.MorphoLayout.addWidget(self.comboBox, 0, 1, 1, 1)
        self.TransforLayout.addLayout(self.MorphoLayout)
        self.GeoLayout = QtWidgets.QGridLayout()
        self.GeoLayout.setObjectName("GeoLayout")
        self.GeoLabel = QtWidgets.QLabel(self.layoutWidget)
        self.GeoLabel.setObjectName("GeoLabel")
        self.GeoLayout.addWidget(self.GeoLabel, 0, 0, 1, 1)
        self.GeometricBox = QtWidgets.QComboBox(self.layoutWidget)
        self.GeometricBox.setEnabled(True)
        self.GeometricBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.GeometricBox.setEditable(False)

        GeoList = ["Scalling", "Translation", "Rotation", "Perspective Transformation"]

        self.GeometricBox.addItems(GeoList)
        self.GeometricBox.setObjectName("GeoBox")
        self.GeoLayout.addWidget(self.GeometricBox, 0, 1, 1, 1)
        self.TransforLayout.addLayout(self.GeoLayout)
        self.ColorFiltersGeoMorpLayout.addLayout(self.TransforLayout, 1, 0, 1, 1)
        self.ColorFiltersGeoMorpLayoutThreshLayout.addLayout(self.ColorFiltersGeoMorpLayout, 0, 0, 1, 1)
        self.ThreshBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.ThreshBox.setObjectName("ThreshBox")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.ThreshBox)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.ThreshTypeBox = QtWidgets.QGroupBox(self.ThreshBox)
        self.ThreshTypeBox.setObjectName("ThreshTypeBox")
        self.ToZeroInvButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.ToZeroInvButton.setGeometry(QtCore.QRect(13, 121, 78, 20))
        self.ToZeroInvButton.setObjectName("ToZeroInvButton")
        self.BinaryButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.BinaryButton.setGeometry(QtCore.QRect(14, 21, 55, 20))
        self.BinaryButton.setObjectName("BinaryButton")
        self.TruncButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.TruncButton.setGeometry(QtCore.QRect(14, 71, 52, 20))
        self.TruncButton.setObjectName("TruncButton")
        self.BinaryInvButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.BinaryInvButton.setGeometry(QtCore.QRect(14, 46, 72, 20))
        self.BinaryInvButton.setObjectName("BinaryInvButton")
        self.ToZeroButton = QtWidgets.QRadioButton(self.ThreshTypeBox)
        self.ToZeroButton.setGeometry(QtCore.QRect(14, 96, 55, 20))
        self.ToZeroButton.setObjectName("ToZeroButton")
        self.gridLayout_10.addWidget(self.ThreshTypeBox, 0, 0, 1, 1)
        self.ThreshSlider = QtWidgets.QSlider(self.ThreshBox)
        self.ThreshSlider.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.ThreshSlider.setOrientation(QtCore.Qt.Horizontal)
        self.ThreshSlider.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.ThreshSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.ThreshSlider.setTickInterval(10)
        self.ThreshSlider.setSingleStep(1)
        self.ThreshSlider.setObjectName("ThreshSlider")
        self.ThreshSlider.setRange(0, 255)
        self.gridLayout_10.addWidget(self.ThreshSlider, 1, 0, 1, 1)
        self.ColorFiltersGeoMorpLayoutThreshLayout.addWidget(self.ThreshBox, 0, 1, 1, 1)
        self.ImgProcessMenuLayout.addLayout(self.ColorFiltersGeoMorpLayoutThreshLayout, 0, 0, 1, 1)
        self.BrightnessLayout = QtWidgets.QGridLayout()
        self.BrightnessLayout.setObjectName("BrightnessLayout")
        self.BrightnessBox = QtWidgets.QGroupBox(self.layoutWidget)
        self.BrightnessBox.setObjectName("BrightnessBox")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.BrightnessBox)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.BrightnessSlider = QtWidgets.QSlider(self.BrightnessBox)
        self.BrightnessSlider.setCursor(QtGui.QCursor(QtCore.Qt.ClosedHandCursor))
        self.BrightnessSlider.setOrientation(QtCore.Qt.Horizontal)
        self.BrightnessSlider.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.BrightnessSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.BrightnessSlider.setTickInterval(10)
        self.BrightnessSlider.setSingleStep(1)
        self.BrightnessSlider.setObjectName("BrightnessSlider")
        self.BrightnessSlider.setRange(1, 255)
        self.gridLayout_17.addWidget(self.BrightnessSlider, 0, 0, 1, 1)
        self.BrightnessLayout.addWidget(self.BrightnessBox, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.BrightnessLayout.addItem(spacerItem, 0, 1, 1, 1)
        self.ImgProcessMenuLayout.addLayout(self.BrightnessLayout, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.FileMenu = QtWidgets.QMenuBar(MainWindow)
        self.FileMenu.setGeometry(QtCore.QRect(0, 0, 1300, 21))
        self.FileMenu.setObjectName("FileMenu")
        self.menuFile = QtWidgets.QMenu(self.FileMenu)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.FileMenu)
        self.menuHelp.setTearOffEnabled(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../Cop/help_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuHelp.setIcon(icon)
        self.menuHelp.setToolTipsVisible(False)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.FileMenu)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_as = QtWidgets.QAction(MainWindow)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionColor = QtWidgets.QAction(MainWindow)
        self.actionColor.setObjectName("actionColor")
        self.actionBlur = QtWidgets.QAction(MainWindow)
        self.actionBlur.setObjectName("actionBlur")
        self.actionBrightnes = QtWidgets.QAction(MainWindow)
        self.actionBrightnes.setObjectName("actionBrightnes")
        self.actionThresholding = QtWidgets.QAction(MainWindow)
        self.actionThresholding.setObjectName("actionThresholding")
        self.actionGeometric = QtWidgets.QAction(MainWindow)
        self.actionGeometric.setObjectName("actionGeometric")
        self.actionLaplacian = QtWidgets.QAction(MainWindow)
        self.actionLaplacian.setObjectName("actionLaplacian")
        self.actionScharr = QtWidgets.QAction(MainWindow)
        self.actionScharr.setObjectName("actionScharr")
        self.actionSobel = QtWidgets.QAction(MainWindow)
        self.actionSobel.setObjectName("actionSobel")
        self.actionCanny = QtWidgets.QAction(MainWindow)
        self.actionCanny.setObjectName("actionCanny")
        # Add action to menu
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuFile.addAction(self.actionExit)
        self.FileMenu.addAction(self.menuFile.menuAction())
        self.FileMenu.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.GeometricBox.activated.connect(self.ActionGeoBox)
        self.BrightnessSlider.valueChanged['int'].connect(self.BrightValue) # type: ignore
        # Menu File buttons
        self.actionOpen.triggered.connect(self.loadImage) # type: ignore
        self.actionSave.triggered.connect(self.saveImage) # type: ignore
        self.actionSave_as.triggered.connect(self.saveAsImage) # type: ignore
        self.actionExit.triggered.connect(self.CloseApp) # type: ignore
        # Low-pass filtering buttons
        self.MedBlurrButton.clicked.connect(self.LowPassAction) # type: ignore
        self.BillateralButton.clicked.connect(self.LowPassAction) # type: ignore
        self.GaussBlurrButton.clicked.connect(self.LowPassAction) # type: ignore
        self.ImgBlurrButton.clicked.connect(self.LowPassAction) # type: ignore
        self.ConvButton.clicked.connect(self.LowPassAction) # type: ignore
        # Changing colorspace buttons
        self.BgrButton.clicked.connect(self.ChangeColorAction) # type: ignore
        self.RgbButton.clicked.connect(self.ChangeColorAction) # type: ignore
        self.HsvButton.clicked.connect(self.ChangeColorAction) # type: ignore
        self.GrayButton.clicked.connect(self.ChangeColorAction) # type: ignore
        # High-pass filtering buttons
        self.SobelButton.clicked.connect(self.HighPassAction) # type: ignore
        self.ScharrButton.clicked.connect(self.ImgDispLabel.clear) # type: ignore
        self.LaplaButton.clicked.connect(self.ImgDispLabel.clear) # type: ignore
        self.CannyButton.clicked.connect(self.ImgDispLabel.clear) # type: ignore
        # Thresholding buttons
        self.ToZeroInvButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        self.TruncButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        self.BinaryInvButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        self.BinaryButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        self.ToZeroButton.clicked.connect(self.ThreshTypesAction) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # variables for image location and info from img
        self.filename = None
        self.tmp = None
        self.brightness_val_now = 0
        self.thresh_val_now = 0
        self.thresh_type = None
        self.ColorType = 0 # variable for colorspace type
        self.loadimage = None
        self.LowPassButton = None


    ''' func used to load images selected by user and set it to label '''
    def loadImage(self):
        self.filename = QtWidgets.QFileDialog.getOpenFileName(filter = " (*.jpg *.png)")[0]
        self.image = cv2.imread(self.filename)
        self.setImage(self.image)
        print("Loaded image: ", self.filename)


    ''' func used to resize selected images and convert them to QImage '''
    def setImage(self, image):
        self.tmp = image
        image = imutils.resize(image, 600, 500)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QtGui.QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QtGui.QImage.Format_RGB888)
        self.ImgDispLabel.setPixmap(QtGui.QPixmap.fromImage(image))

    ''' func used to save processed image by menu '''
    def saveImage(self):
        cv2.imwrite(self.filename, self.image)
        print("Saved: ", self.filename)

    ''' func used to save processed image with name and location selected by user by menu '''
    def saveAsImage(self):
        self.saveName = QtWidgets.QFileDialog.getSaveFileName(MainWindow, "Save file", self.filename, "(*.jpg *.png)")[0]
        cv2.imwrite(self.saveName, self.image)
        print("Saved as: ", self.saveName)

    ''' func used to close app by menu '''
    def CloseApp(self):
        print("Application is being closed.")
        app.quit()

    ''' func used to select and use proper geometric transformations on processed image '''
    def ActionGeoBox(self, index):

        ctext = self.GeometricBox.itemText(index) # get proper transformation
        if ctext == "Scalling":
            self.image = Scalling.ScaleImg(self, self.image, 2, 2, cv2.INTER_LINEAR)  #TODO add value_x and value_y of Scalling
            self.setImage(self.image)
        elif ctext =="Translation":
            self.image = Translation.MoveImg(self, self.image, -100, 200)  #TODO add value_x and value_y of moving
            self.setImage(self.image)
        elif ctext == "Rotation":
            self.image = Rotation.RotateImg(self, self.image, 90, 1) #TODO add value of selected angle
            self.setImage(self.image)
        else:
            print("Perspective Transform")
            self.image = PerspectiveTrans.GetPerspective(self, self.image)
            self.setImage(self.image)

    ''' func used to take value from BrightnessSlider (1 - 255) '''
    def BrightValue(self, value):
        self.brightness_val_now = value
        print("Brightness value is: ", value)
        self.UpdateImg()

    ''' func used to set brightness of image appropriate to value selected by user '''
    def SetBrightValue(self, value):
        image = cv2.convertScaleAbs(self.image, alpha = 0.5, beta = value)
        return image

    ''' func used to take value from ThreshSlider (0 - 255) '''
    def ThreshValue(self, value):
        self.thresh_val_now = value
        print("Threshing value is: ", value)
        image = self.SetThreshValue()
        self.setImage(image)

    ''' func used to set thresh of image appropriate to value and threshing type selected by user '''
    def SetThreshValue(self):
        image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
        self.ColorType = 2 # 2 is gray
        ret, image = cv.threshold(image, self.thresh_val_now, 255, self.thresh_type)
        return image

    ''' func used by brightness functions to update image '''
    def UpdateImg(self):
        image = self.SetBrightValue(self.image, self.brightness_val_now)
        self.setImage(image)

    ''' func used to set colorspace of image chosen by operator '''
    def ChangeColorAction(self):
        if self.RgbButton.isChecked():
            if (self.ColorType == 0): # RGB
                pass
            elif (self.ColorType == 1): # HSV
                self.image = cv2.cvtColor(self.image, cv2.COLOR_HSV2RGB)
            elif (self.ColorType == 2): # Gray
                self.image = cv2.imread(self.filename)
            elif (self.ColorType == 3): # BGR
                self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
            self.ColorType = 0
            if self.windowRGB.isVisible():
                self.windowRGB.hide()
            else:
                self.windowRGB.show()
                self.windowRGB.GetImg(self.image)
                self.windowRGB.FirstSlider.valueChanged['int'].connect(self.windowRGB.FirstGetValue)
                self.windowRGB.FirstSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowRGB.SecondSlider.valueChanged['int'].connect(self.windowRGB.SecondGetValue)
                self.windowRGB.SecondSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowRGB.ThirdSlider.valueChanged['int'].connect(self.windowRGB.ThirdGetValue)
                self.windowRGB.ThirdSlider.valueChanged['int'].connect(self.UpdateColorspace)

        elif self.HsvButton.isChecked():

            if (self.ColorType == 0): # RGB
                self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2HSV)
            elif (self.ColorType == 1): # HSV
                pass
            elif (self.ColorType == 2): # GRAY
                self.image = cv2.imread(self.filename)
            elif (self.ColorType == 3): # BGR
                self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2HSV)

            self.ColorType = 1
            if self.windowHSV.isVisible():
                self.windowHSV.hide()
            else:
                self.windowHSV.show()
                self.windowHSV.GetImg(self.image)
                self.windowHSV.FirstSlider.valueChanged['int'].connect(self.windowHSV.FirstGetValue)
                self.windowHSV.FirstSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowHSV.SecondSlider.valueChanged['int'].connect(self.windowHSV.SecondGetValue)
                self.windowHSV.SecondSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowHSV.ThirdSlider.valueChanged['int'].connect(self.windowHSV.ThirdGetValue)
                self.windowHSV.ThirdSlider.valueChanged['int'].connect(self.UpdateColorspace)

        elif self.GrayButton.isChecked():
            if (self.ColorType == 0): # RGB
                self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2GRAY)
            elif (self.ColorType == 1): # HSV
                image = cv2.cvtColor(self.image, cv2.COLOR_HSV2RGB)
                self.image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            elif (self.ColorType == 2): # GRAY
                pass
            elif (self.ColorType == 3): # BGR
                self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
            self.ColorType = 2
            self.setImage(self.image)

        elif self.BgrButton.isChecked():
            if (self.ColorType == 0):  # RGB
                self.image = cv2.cvtColor(self.image, cv2.COLOR_RGB2BGR)
            elif (self.ColorType == 1):  # HSV
                self.image = cv2.cvtColor(self.image, cv2.COLOR_HSV2BGR)
            elif (self.ColorType == 2):  # GRAY
                self.image = cv2.imread(self.filename)
            elif (self.ColorType == 3):  # BGR
                pass
            self.ColorType = 3
            if self.windowBGR.isVisible():
                self.windowBGR.hide()
            else:
                self.windowBGR.show()
                self.windowBGR.GetImg(self.image)
                self.windowBGR.FirstSlider.valueChanged['int'].connect(self.windowBGR.FirstGetValue)
                self.windowBGR.FirstSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowBGR.SecondSlider.valueChanged['int'].connect(self.windowBGR.SecondGetValue)
                self.windowBGR.SecondSlider.valueChanged['int'].connect(self.UpdateColorspace)
                self.windowBGR.ThirdSlider.valueChanged['int'].connect(self.windowBGR.ThirdGetValue)
                self.windowBGR.ThirdSlider.valueChanged['int'].connect(self.UpdateColorspace)

    ''' func to update image with values from sliders, depends on the current chosen colorspace '''
    def UpdateColorspace(self):
        if self.ColorType == 0:
            self.image = self.windowRGB.SetValue()
        if self.ColorType == 1:
            self.image = self.windowHSV.SetValue()
        elif self.ColorType == 3:
            self.image = self.windowBGR.SetValue()
        self.setImage(self.image)

    ''' func used to set high-pass filter of image chosen by operator '''
    def HighPassAction(self):
        if self.SobelButton.isChecked():
            pass
        elif self.ScharrButton.isChecked():
            pass
        elif self.LaplaButton.isChecked():
            pass
        elif self.CannyButton.isChecked():
            pass

    ''' func to update image with values from sliders, depends on the chosen low-pass filter '''
    def UpdateLowPass(self):
        if self.LowPassButton == 0:
            self.image = self._2DFilter.SetImg()
        elif self.LowPassButton == 1:
            self.image = self.ImgSmoothing.SetImg()
        elif self.LowPassButton == 2:
            self.image = self.GaussBlur.SetImg()
        elif self.LowPassButton == 3:
            self.image = self.MedBlur.SetImg()
        else:
            self.image = self.BilateralFilter.SetImg()
        self.setImage(self.image)

    ''' func used to set low-pass filter of image chosen by operator '''
    def LowPassAction(self):
        if self.ConvButton.isChecked():
            self.LowPassButton = 0
            if self._2DFilter.isVisible():
                self._2DFilter.hide()
            else:
                self._2DFilter.show()
                self._2DFilter.GetImg(self.image)
                self._2DFilter.Slider.valueChanged['int'].connect(self._2DFilter.GetKernelSize)
                self._2DFilter.Slider.valueChanged['int'].connect(self.UpdateLowPass)
        elif self.ImgBlurrButton.isChecked():
            self.LowPassButton = 1
            if self.ImgSmoothing.isVisible():
                self.ImgSmoothing.hide()
            else:
                self.ImgSmoothing.show()
                self.ImgSmoothing.GetImg(self.image)
                self.ImgSmoothing.Slider.valueChanged['int'].connect(self.ImgSmoothing.GetKernelSize)
                self.ImgSmoothing.Slider.valueChanged['int'].connect(self.UpdateLowPass)
        elif self.GaussBlurrButton.isChecked():
            self.LowPassButton = 2
            if self.GaussBlur.isVisible():
                self.GaussBlur.hide()
            else:
                self.GaussBlur.show()
                self.GaussBlur.GetImg(self.image)
                self.GaussBlur.Slider.valueChanged['int'].connect(self.GaussBlur.GetKernelSize)
                self.GaussBlur.Slider.valueChanged['int'].connect(self.UpdateLowPass)
        elif self.MedBlurrButton.isChecked():
            self.LowPassButton = 3
            if self.MedBlur.isVisible():
                self.MedBlur.hide()
            else:
                self.MedBlur.show()
                self.MedBlur.GetImg(self.image)
                self.MedBlur.Slider.valueChanged['int'].connect(self.MedBlur.GetNoiseLevel)
                self.MedBlur.Slider.valueChanged['int'].connect(self.UpdateLowPass)
        elif self.BillateralButton.isChecked():
            self.LowPassButton = 4
            if self.BilateralFilter.isVisible():
                self.BilateralFilter.hide()
            else:
                self.BilateralFilter.show()
                self.BilateralFilter.GetImg(self.image)
                self.BilateralFilter.Slider.valueChanged['int'].connect(self.BilateralFilter.GetKernelSize)
                self.BilateralFilter.Slider.valueChanged['int'].connect(self.UpdateLowPass)


    ''' func used to display histogram of current displayed image. Used canvas to it.'''
    def DisplayHistogram(self):
        pass

    ''' func used to check which thresholding type is selected and set it '''
    def ThreshTypesAction(self):
        if self.BinaryButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue)  # type: ignore
            self.thresh_type = cv.THRESH_BINARY
            print("Binary")
        elif self.BinaryInvButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue) # type:ignore
            self.thresh_type = cv2.THRESH_BINARY_INV
            print("Binary INV")
        elif self.TruncButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue)
            self.thresh_type = cv2.THRESH_TRUNC
            print("Trunc")
        elif self.ToZeroButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue)
            self.thresh_type = cv2.THRESH_TOZERO
            print("ToZero")
        elif self.ToZeroInvButton.isChecked():
            self.ThreshSlider.valueChanged['int'].connect(self.ThreshValue)
            self.thresh_type = cv2.THRESH_TOZERO_INV
            print("ToZeroINV")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.ImageProcessingBox.setTitle(_translate("MainWindow", "Image Processing"))
        self.ColorBox.setTitle(_translate("MainWindow", "Changing colorspace"))
        self.BgrButton.setText(_translate("MainWindow", "BGR"))
        self.RgbButton.setText(_translate("MainWindow", "RGB"))
        self.HsvButton.setText(_translate("MainWindow", "HSV"))
        self.GrayButton.setText(_translate("MainWindow", "GRAY"))
        self.HighPassBox.setTitle(_translate("MainWindow", "High-pass filtering"))
        self.SobelButton.setText(_translate("MainWindow", "Sobel"))
        self.ScharrButton.setText(_translate("MainWindow", "Scharr"))
        self.LaplaButton.setText(_translate("MainWindow", "Laplacian"))
        self.CannyButton.setText(_translate("MainWindow", "Canny"))
        self.LowPassBox.setTitle(_translate("MainWindow", "Low-pass filtering"))
        self.ConvButton.setText(_translate("MainWindow", "2D Convolution"))
        self.ImgBlurrButton.setText(_translate("MainWindow", "Image Blurring"))
        self.GaussBlurrButton.setText(_translate("MainWindow", "Gaussian Blurring"))
        self.MedBlurrButton.setText(_translate("MainWindow", "Median Blurring"))
        self.BillateralButton.setText(_translate("MainWindow", "Billateral"))
        self.MorphoLabel.setText(_translate("MainWindow", "Morphological transformation"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Erosion"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Dilation"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Opening"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Closing"))
        self.GeoLabel.setText(_translate("MainWindow", "Geometric transformation"))
        self.GeometricBox.setCurrentText(_translate("MainWindow", "Scalling"))
        self.GeometricBox.setItemText(0, _translate("MainWindow", "Scalling"))
        self.GeometricBox.setItemText(1, _translate("MainWindow", "Translation"))
        self.GeometricBox.setItemText(2, _translate("MainWindow", "Rotation"))
        self.GeometricBox.setItemText(3, _translate("MainWindow", "Perspective transformation"))
        self.ThreshBox.setTitle(_translate("MainWindow", "Thresholding"))
        self.ThreshTypeBox.setTitle(_translate("MainWindow", "Thresholding types:"))
        self.ToZeroInvButton.setText(_translate("MainWindow", "To zero inv"))
        self.BinaryButton.setText(_translate("MainWindow", "Binary"))
        self.TruncButton.setText(_translate("MainWindow", "Trunc"))
        self.BinaryInvButton.setText(_translate("MainWindow", "Binary inv"))
        self.ToZeroButton.setText(_translate("MainWindow", "To zero"))
        self.BrightnessBox.setTitle(_translate("MainWindow", "Brightness"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionOpen.setText(_translate("MainWindow", "Open..."))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSave_as.setText(_translate("MainWindow", "Save as..."))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionColor.setText(_translate("MainWindow", "Color"))
        self.actionBlur.setText(_translate("MainWindow", "Blur"))
        self.actionBrightnes.setText(_translate("MainWindow", "Brightnes"))
        self.actionThresholding.setText(_translate("MainWindow", "Thresholding"))
        self.actionGeometric.setText(_translate("MainWindow", "Geometric"))
        self.actionLaplacian.setText(_translate("MainWindow", "Laplacian"))
        self.actionScharr.setText(_translate("MainWindow", "Scharr"))
        self.actionSobel.setText(_translate("MainWindow", "Sobel"))
        self.actionCanny.setText(_translate("MainWindow", "Canny"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
